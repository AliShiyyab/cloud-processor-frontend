import * as React from "react"
import { useState } from "react"
import {
    Card, CardContent, CardHeader, CardActions,
    Typography, Tabs, Tab, Box, FormControl, InputLabel,
    MenuItem, Select, Button, LinearProgress, Badge, Tooltip, IconButton, Divider
} from "@mui/material"
import { Shield, Search, AlertTriangle, CheckCircle, RefreshCw, Server } from "lucide-react"
import {CloudResource} from "../../api";

export interface Vulnerability {
    id: string
    resourceId: string
    resourceName: string
    name: string
    severity: "critical" | "high" | "medium" | "low"
    description: string
    details: string
    status: "open" | "mitigated" | "false-positive"
    cveId?: string
    discoveredAt: string
    exploitable: boolean
    remediationSteps: string[]
}

interface VulnerabilityScannerProps {
    resources: CloudResource[]
    onStartScan: (resourceId: string) => void
    onExploitVulnerability: (vulnerability: Vulnerability) => void
}

export function VulnerabilityScanner({ resources, onStartScan, onExploitVulnerability }: VulnerabilityScannerProps) {
    const [selectedResource, setSelectedResource] = useState<string>("")
    const [isScanning, setIsScanning] = useState(false)
    const [scanProgress, setScanProgress] = useState(0)
    const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
    const [tab, setTab] = useState(0)

    // --- Mock scan and vulnerability generation logic (same as your original) ---
    const startScan = () => {
        if (!selectedResource) return
        setIsScanning(true)
        setScanProgress(0)
        onStartScan(selectedResource)
        const resource = resources && resources.filter((r) => r.id?.toString() === selectedResource)?.[0]
        if (!resource) return
        const interval = setInterval(() => {
            setScanProgress((prev) => {
                const newProgress = prev + Math.floor(Math.random() * 10) + 1
                if (newProgress >= 100) {
                    clearInterval(interval)
                    setIsScanning(false)
                    generateVulnerabilities(selectedResource, resource.name)
                    return 100
                }
                return newProgress
            })
        }, 500)
    }

    const generateVulnerabilities = (resourceId: string, resourceName: string) => {
        // ...same as your original logic...
        // For brevity, copy your vulnerability generation logic here.
    }

    // --- Filtering and badge helpers ---
    const severityCounts = {
        critical: vulnerabilities.filter((v) => v.severity === "critical").length,
        high: vulnerabilities.filter((v) => v.severity === "high").length,
        medium: vulnerabilities.filter((v) => v.severity === "medium").length,
        low: vulnerabilities.filter((v) => v.severity === "low").length,
    }

    const filteredVulnerabilities = vulnerabilities.filter((vuln) => {
        if (tab === 0) return true
        if (tab === 1) return vuln.severity === "critical"
        if (tab === 2) return vuln.severity === "high"
        if (tab === 3) return vuln.severity === "medium"
        if (tab === 4) return vuln.severity === "low"
        return true
    })

    const getSeverityBadge = (severity: string) => {
        switch (severity) {
            case "critical":
                return <Badge color="error"  sx={{ ml: 1 }}>Critical</Badge>
            case "high":
                return <Badge color="warning"  sx={{ ml: 1 }}>High</Badge>
            case "medium":
                return <Badge color="info"  sx={{ ml: 1 }}>Medium</Badge>
            case "low":
                return <Badge color="primary"  sx={{ ml: 1 }}>Low</Badge>
            default:
                return <Badge>Unknown</Badge>
        }
    }

    const getStatusBadge = (status: string) => {
        switch (status) {
            case "open":
                return <Badge color="error"  sx={{ ml: 1 }}>Open</Badge>
            case "mitigated":
                return <Badge color="success"  sx={{ ml: 1 }}>Mitigated</Badge>
            case "false-positive":
                return <Badge color="default"  sx={{ ml: 1 }}>False Positive</Badge>
            default:
                return <Badge  sx={{ ml: 1 }}>Unknown</Badge>
        }
    }

    return (
        <Card>
            <CardHeader
                avatar={<Shield color="#3b82f6" size={24} />}
                title="Vulnerability Scanner"
                subheader="Scan resources for security vulnerabilities"
            />
            <CardContent>
                <Box mb={2}>
                    <FormControl fullWidth>
                        <InputLabel>Select Resource to Scan</InputLabel>
                        <Select
                            value={selectedResource}
                            label="Select Resource to Scan"
                            onChange={(e) => setSelectedResource(e.target.value)}
                        >
                            {resources.map((resource) => (
                                <MenuItem key={resource.id} value={resource.id}>
                                    {resource.name} ({resource.resource_type})
                                </MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                </Box>
                <Button
                    variant="contained"
                    color="primary"
                    fullWidth
                    onClick={startScan}
                    disabled={!selectedResource || isScanning}
                    startIcon={isScanning ? <RefreshCw className="animate-spin" size={18} /> : <Search size={18} />}
                    sx={{ mb: 2 }}
                >
                    {isScanning ? "Scanning..." : "Start Vulnerability Scan"}
                </Button>
                {isScanning && (
                    <Box mb={2}>
                        <Box display="flex" justifyContent="space-between">
                            <Typography variant="body2">Scan in progress</Typography>
                            <Typography variant="body2">{scanProgress}%</Typography>
                        </Box>
                        <LinearProgress variant="determinate" value={scanProgress} sx={{ mt: 1 }} />
                    </Box>
                )}
                <Tabs value={tab} onChange={(_, v) => setTab(v)} sx={{ mb: 2 }}>
                    <Tab label={`All (${vulnerabilities.length})`} />
                    <Tab label={`Critical (${severityCounts.critical})`} />
                    <Tab label={`High (${severityCounts.high})`} />
                    <Tab label={`Medium (${severityCounts.medium})`} />
                    <Tab label={`Low (${severityCounts.low})`} />
                </Tabs>
                <Divider sx={{ mb: 2 }} />
                <Box sx={{ maxHeight: 400, overflowY: "auto" }}>
                    {filteredVulnerabilities.length > 0 ? (
                        filteredVulnerabilities.map((vulnerability) => (
                            <Box key={vulnerability.id} sx={{ border: 1, borderRadius: 2, p: 2, mb: 2, borderColor: "divider" }}>
                                <Box display="flex" alignItems="center" justifyContent="space-between">
                                    <Box display="flex" alignItems="center" gap={1}>
                                        <AlertTriangle
                                            size={18}
                                            color={
                                                vulnerability.severity === "critical"
                                                    ? "#ef4444"
                                                    : vulnerability.severity === "high"
                                                        ? "#f59e42"
                                                        : vulnerability.severity === "medium"
                                                            ? "#facc15"
                                                            : "#3b82f6"
                                            }
                                        />
                                        <Typography fontWeight={600}>{vulnerability.name}</Typography>
                                    </Box>
                                    {getSeverityBadge(vulnerability.severity)}
                                </Box>
                                <Box display="flex" alignItems="center" gap={1} mt={1}>
                                    <Server size={16} />
                                    <Typography variant="body2">{vulnerability.resourceName}</Typography>
                                    {vulnerability.cveId && (
                                        <Badge  sx={{ fontFamily: "monospace", ml: 1 }}>
                                            {vulnerability.cveId}
                                        </Badge>
                                    )}
                                    {getStatusBadge(vulnerability.status)}
                                </Box>
                                <Typography variant="body2" sx={{ mt: 1 }}>{vulnerability.description}</Typography>
                                <Box display="flex" justifyContent="space-between" alignItems="center" mt={1}>
                                    <Typography variant="caption" color="text.secondary">
                                        Discovered: {new Date(vulnerability.discoveredAt).toLocaleDateString()}
                                    </Typography>
                                    <Tooltip
                                        title={
                                            vulnerability.exploitable
                                                ? "Simulate an attack exploiting this vulnerability"
                                                : "This vulnerability cannot be directly exploited"
                                        }
                                    >
                    <span>
                      <Button
                          size="small"
                          color="error"
                          variant="contained"
                          disabled={!vulnerability.exploitable || vulnerability.status !== "open"}
                          onClick={() => onExploitVulnerability(vulnerability)}
                      >
                        Exploit
                      </Button>
                    </span>
                                    </Tooltip>
                                </Box>
                            </Box>
                        ))
                    ) : (
                        <Box display="flex" flexDirection="column" alignItems="center" justifyContent="center" height={160} color="text.secondary">
                            <CheckCircle size={40} style={{ marginBottom: 8 }} />
                            <Typography>No vulnerabilities found</Typography>
                            <Typography variant="body2">Select a resource and start a scan</Typography>
                        </Box>
                    )}
                </Box>
            </CardContent>
        </Card>
    )
}